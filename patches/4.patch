# HG changeset patch
# Parent abfd5474f5113eb2abff1b08eaff652426369837
# User Paul Adenot <paul@paul.cx>
diff --git a/content/canvas/src/nsCanvasRenderingContext2D.cpp b/content/canvas/src/nsCanvasRenderingContext2D.cpp
--- a/content/canvas/src/nsCanvasRenderingContext2D.cpp
+++ b/content/canvas/src/nsCanvasRenderingContext2D.cpp
@@ -3442,22 +3442,22 @@ nsCanvasRenderingContext2D::DrawImage(ns
                                                     sfeFlags);
             if (!res.mSurface)
                 return NS_ERROR_NOT_AVAILABLE;
         }
 
         imgsurf = res.mSurface.forget();
         imgSize = res.mSize;
 
-        if (mCanvasElement) {
-            CanvasUtils::DoDrawImageSecurityCheck(mCanvasElement,
-                                                  res.mPrincipal,
-                                                  res.mIsWriteOnly,
-                                                  res.mCORSUsed);
-        }
+        //if (mCanvasElement) {
+            //CanvasUtils::DoDrawImageSecurityCheck(mCanvasElement,
+                                                  //res.mPrincipal,
+                                                  //res.mIsWriteOnly,
+                                                  //res.mCORSUsed);
+        //}
 
         if (res.mImageRequest) {
             CanvasImageCache::NotifyDrawImage(content->AsElement(), mCanvasElement,
                                               res.mImageRequest, imgsurf, imgSize);
         }
     }
 
     double sx,sy,sw,sh;
diff --git a/layout/base/nsLayoutUtils.cpp b/layout/base/nsLayoutUtils.cpp
--- a/layout/base/nsLayoutUtils.cpp
+++ b/layout/base/nsLayoutUtils.cpp
@@ -4279,19 +4279,19 @@ nsLayoutUtils::SurfaceFromElement(nsHTML
   if (NS_SUCCEEDED(aElement->GetReadyState(&readyState)) &&
       (readyState == nsIDOMHTMLMediaElement::HAVE_NOTHING ||
        readyState == nsIDOMHTMLMediaElement::HAVE_METADATA)) {
     result.mIsStillLoading = true;
     return result;
   }
 
   // If it doesn't have a principal, just bail
-  nsCOMPtr<nsIPrincipal> principal = aElement->GetCurrentPrincipal();
-  if (!principal)
-    return result;
+  //nsCOMPtr<nsIPrincipal> principal = aElement->GetCurrentPrincipal();
+  //if (!principal)
+    //return result;
 
   ImageContainer *container = aElement->GetImageContainer();
   if (!container)
     return result;
 
   gfxIntSize size;
   nsRefPtr<gfxASurface> surf = container->GetCurrentAsSurface(&size);
   if (!surf)
@@ -4305,17 +4305,17 @@ nsLayoutUtils::SurfaceFromElement(nsHTML
     ctx->SetOperator(gfxContext::OPERATOR_SOURCE);
     ctx->DrawSurface(surf, size);
     surf = imgSurf;
   }
 
   result.mCORSUsed = aElement->GetCORSMode() != CORS_NONE;
   result.mSurface = surf;
   result.mSize = size;
-  result.mPrincipal = principal.forget();
+  //result.mPrincipal = principal.forget();
   result.mIsWriteOnly = false;
 
   return result;
 }
 
 nsLayoutUtils::SurfaceFromElementResult
 nsLayoutUtils::SurfaceFromElement(dom::Element* aElement,
                                   PRUint32 aSurfaceFlags)
